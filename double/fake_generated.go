// Code generated by double/internal/generator DO NOT EDIT.

package double

import (
	"context"

	"github.com/krostar/cli"
)

// NewFake creates a new fake implementation of the cli.Command interface.
//
// By default, the fake command only implements the basic Execute method,
// returning nil. Use the FakeWith* options to implement additional interfaces
// and customize behavior.
func NewFake(opts ...FakeOption) cli.Command {
	f := new(fakeAllInterfaces)
	f.onExecute = func(context.Context, []string, []string) error { return nil }

	for _, opt := range opts {
		opt(f)
	}

	return reduceWrapped(f,
		f.onContext != nil,
		f.onDescription != nil,
		f.onExamples != nil,
		f.onFlags != nil,
		f.onHook != nil,
		f.onPersistentFlags != nil,
		f.onPersistentHook != nil,
		f.onUsage != nil,
	)
}

// FakeOption is a function to configures a fake behavior.
type FakeOption func(f *fakeAllInterfaces)

// FakeWithContext configures the fake to implement the Context method.
// The provided function will be called when the Context method is invoked.
func FakeWithContext(f func(context.Context) context.Context) FakeOption {
	return func(fake *fakeAllInterfaces) { fake.onContext = f }
}

// FakeWithDescription configures the fake to implement the Description method.
// The provided function will be called when the Description method is invoked.
func FakeWithDescription(f func() string) FakeOption {
	return func(fake *fakeAllInterfaces) { fake.onDescription = f }
}

// FakeWithExamples configures the fake to implement the Examples method.
// The provided function will be called when the Examples method is invoked.
func FakeWithExamples(f func() []string) FakeOption {
	return func(fake *fakeAllInterfaces) { fake.onExamples = f }
}

// FakeWithExecute configures the fake to implement the Execute method.
// The provided function will be called when the Execute method is invoked.
func FakeWithExecute(f func(context.Context, []string, []string) error) FakeOption {
	return func(fake *fakeAllInterfaces) { fake.onExecute = f }
}

// FakeWithFlags configures the fake to implement the Flags method.
// The provided function will be called when the Flags method is invoked.
func FakeWithFlags(f func() []cli.Flag) FakeOption {
	return func(fake *fakeAllInterfaces) { fake.onFlags = f }
}

// FakeWithHook configures the fake to implement the Hook method.
// The provided function will be called when the Hook method is invoked.
func FakeWithHook(f func() *cli.Hook) FakeOption {
	return func(fake *fakeAllInterfaces) { fake.onHook = f }
}

// FakeWithPersistentFlags configures the fake to implement the PersistentFlags method.
// The provided function will be called when the PersistentFlags method is invoked.
func FakeWithPersistentFlags(f func() []cli.Flag) FakeOption {
	return func(fake *fakeAllInterfaces) { fake.onPersistentFlags = f }
}

// FakeWithPersistentHook configures the fake to implement the PersistentHook method.
// The provided function will be called when the PersistentHook method is invoked.
func FakeWithPersistentHook(f func() *cli.PersistentHook) FakeOption {
	return func(fake *fakeAllInterfaces) { fake.onPersistentHook = f }
}

// FakeWithUsage configures the fake to implement the Usage method.
// The provided function will be called when the Usage method is invoked.
func FakeWithUsage(f func() string) FakeOption {
	return func(fake *fakeAllInterfaces) { fake.onUsage = f }
}

type fakeAllInterfaces struct {
	onContext         func(context.Context) context.Context
	onDescription     func() string
	onExamples        func() []string
	onExecute         func(context.Context, []string, []string) error
	onFlags           func() []cli.Flag
	onHook            func() *cli.Hook
	onPersistentFlags func() []cli.Flag
	onPersistentHook  func() *cli.PersistentHook
	onUsage           func() string
}

func (fake *fakeAllInterfaces) Context(a0 context.Context) context.Context { return fake.onContext(a0) }

func (fake *fakeAllInterfaces) Description() string { return fake.onDescription() }

func (fake *fakeAllInterfaces) Examples() []string { return fake.onExamples() }

func (fake *fakeAllInterfaces) Execute(a0 context.Context, b0, c0 []string) error {
	return fake.onExecute(a0, b0, c0)
}

func (fake *fakeAllInterfaces) Flags() []cli.Flag { return fake.onFlags() }

func (fake *fakeAllInterfaces) Hook() *cli.Hook { return fake.onHook() }

func (fake *fakeAllInterfaces) PersistentFlags() []cli.Flag { return fake.onPersistentFlags() }

func (fake *fakeAllInterfaces) PersistentHook() *cli.PersistentHook { return fake.onPersistentHook() }

func (fake *fakeAllInterfaces) Usage() string { return fake.onUsage() }
