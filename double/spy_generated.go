// Code generated by double/internal/generator DO NOT EDIT.

package double

import (
	"context"

	"github.com/krostar/cli"
)

// spyAllInterfaces implements all CLI command interfaces while capturing method calls.
// It wraps an underlying command and intercepts all interface method calls to record them.
// This allows for testing which methods were called, with what parameters, and in what order.
type spyAllInterfaces struct {
	underlying cli.Command                   // The actual command being spied on
	saveRecord func(record SpyCommandRecord) // Function to save records of method calls
}

// Context implements the cli.CommandContext interface.
// It forwards the call to the underlying command while recording the method call,
// its parameters, and the return values.
func (spy *spyAllInterfaces) Context(a0 context.Context) context.Context {
	b0 := spy.underlying.(cli.CommandContext).Context(a0)

	spy.saveRecord(SpyCommandRecord{
		Method:  "Context",
		Inputs:  []any{a0},
		Outputs: []any{b0},
	})

	return b0
}

// Description implements the cli.CommandDescription interface.
// It forwards the call to the underlying command while recording the method call,
// its parameters, and the return values.
func (spy *spyAllInterfaces) Description() string {
	a0 := spy.underlying.(cli.CommandDescription).Description()

	spy.saveRecord(SpyCommandRecord{
		Method:  "Description",
		Inputs:  []any{},
		Outputs: []any{a0},
	})

	return a0
}

// Examples implements the cli.CommandExamples interface.
// It forwards the call to the underlying command while recording the method call,
// its parameters, and the return values.
func (spy *spyAllInterfaces) Examples() []string {
	a0 := spy.underlying.(cli.CommandExamples).Examples()

	spy.saveRecord(SpyCommandRecord{
		Method:  "Examples",
		Inputs:  []any{},
		Outputs: []any{a0},
	})

	return a0
}

// Hook implements the cli.CommandHook interface.
// It forwards the call to the underlying command while recording the method call,
// its parameters, and the return values.
func (spy *spyAllInterfaces) Hook() *cli.Hook {
	a0 := spy.underlying.(cli.CommandHook).Hook()

	spy.saveRecord(SpyCommandRecord{
		Method:  "Hook",
		Inputs:  []any{},
		Outputs: []any{a0},
	})

	return a0
}

// PersistentFlags implements the cli.CommandPersistentFlags interface.
// It forwards the call to the underlying command while recording the method call,
// its parameters, and the return values.
func (spy *spyAllInterfaces) PersistentFlags() []cli.Flag {
	a0 := spy.underlying.(cli.CommandPersistentFlags).PersistentFlags()

	spy.saveRecord(SpyCommandRecord{
		Method:  "PersistentFlags",
		Inputs:  []any{},
		Outputs: []any{a0},
	})

	return a0
}

// Execute implements the cli.Command interface.
// It forwards the call to the underlying command while recording the method call,
// its parameters, and the return values.
func (spy *spyAllInterfaces) Execute(a0 context.Context, b0, c0 []string) error {
	d0 := spy.underlying.(cli.Command).Execute(a0, b0, c0)

	spy.saveRecord(SpyCommandRecord{
		Method:  "Execute",
		Inputs:  []any{a0, b0, c0},
		Outputs: []any{d0},
	})

	return d0
}

// Flags implements the cli.CommandFlags interface.
// It forwards the call to the underlying command while recording the method call,
// its parameters, and the return values.
func (spy *spyAllInterfaces) Flags() []cli.Flag {
	a0 := spy.underlying.(cli.CommandFlags).Flags()

	spy.saveRecord(SpyCommandRecord{
		Method:  "Flags",
		Inputs:  []any{},
		Outputs: []any{a0},
	})

	return a0
}

// PersistentHook implements the cli.CommandPersistentHook interface.
// It forwards the call to the underlying command while recording the method call,
// its parameters, and the return values.
func (spy *spyAllInterfaces) PersistentHook() *cli.PersistentHook {
	a0 := spy.underlying.(cli.CommandPersistentHook).PersistentHook()

	spy.saveRecord(SpyCommandRecord{
		Method:  "PersistentHook",
		Inputs:  []any{},
		Outputs: []any{a0},
	})

	return a0
}

// Usage implements the cli.CommandUsage interface.
// It forwards the call to the underlying command while recording the method call,
// its parameters, and the return values.
func (spy *spyAllInterfaces) Usage() string {
	a0 := spy.underlying.(cli.CommandUsage).Usage()

	spy.saveRecord(SpyCommandRecord{
		Method:  "Usage",
		Inputs:  []any{},
		Outputs: []any{a0},
	})

	return a0
}
