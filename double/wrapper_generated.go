// Code generated by double/internal/generator DO NOT EDIT.

package double

import (
	"context"

	"github.com/krostar/cli"
)

// commandAllInterfaces is a composite interface that includes all CLI command interfaces.
type commandAllInterfaces interface {
	cli.Command
	cli.CommandContext
	cli.CommandDescription
	cli.CommandExamples
	cli.CommandFlags
	cli.CommandHook
	cli.CommandPersistentFlags
	cli.CommandPersistentHook
	cli.CommandUsage
}

// reduceWrappedToUnderlyingInterface examines which interfaces the underlying command
// implements and returns a wrapper that implements the same interfaces.
// This ensures that the resulting wrapper preserves the exact interface set
// of the original command.
func reduceWrappedToUnderlyingInterface(underlying cli.Command, wrapped commandAllInterfaces) cli.Command {
	var (
		_, okCommandContext         = underlying.(cli.CommandContext)
		_, okCommandDescription     = underlying.(cli.CommandDescription)
		_, okCommandExamples        = underlying.(cli.CommandExamples)
		_, okCommandFlags           = underlying.(cli.CommandFlags)
		_, okCommandHook            = underlying.(cli.CommandHook)
		_, okCommandPersistentFlags = underlying.(cli.CommandPersistentFlags)
		_, okCommandPersistentHook  = underlying.(cli.CommandPersistentHook)
		_, okCommandUsage           = underlying.(cli.CommandUsage)
	)

	return reduceWrapped(wrapped, okCommandContext, okCommandDescription, okCommandExamples, okCommandFlags, okCommandHook, okCommandPersistentFlags, okCommandPersistentHook, okCommandUsage)
}

// reduceWrapped returns a command implementation that exposes only the specified interfaces.
func reduceWrapped(wrapped commandAllInterfaces, okCommandContext, okCommandDescription, okCommandExamples, okCommandFlags, okCommandHook, okCommandPersistentFlags, okCommandPersistentHook, okCommandUsage bool) cli.Command {
	switch {
	case okCommandContext && !okCommandDescription && !okCommandExamples && !okCommandHook && !okCommandPersistentHook && !okCommandUsage && !okCommandFlags && !okCommandPersistentFlags:
		return &wrappedCommandCommandContext{wrapped: wrapped}
	case okCommandDescription && !okCommandExamples && !okCommandFlags && !okCommandPersistentFlags && !okCommandPersistentHook && !okCommandUsage && !okCommandContext && !okCommandHook:
		return &wrappedCommandCommandDescription{wrapped: wrapped}
	case okCommandDescription && !okCommandExamples && !okCommandFlags && !okCommandPersistentFlags && !okCommandUsage && !okCommandHook && !okCommandPersistentHook && okCommandContext:
		return &wrappedCommandCommandContextCommandDescription{wrapped: wrapped}
	case !okCommandUsage && !okCommandContext && !okCommandDescription && !okCommandFlags && !okCommandHook && !okCommandPersistentFlags && okCommandExamples && !okCommandPersistentHook:
		return &wrappedCommandCommandExamples{wrapped: wrapped}
	case !okCommandUsage && !okCommandDescription && okCommandExamples && !okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandContext && !okCommandFlags:
		return &wrappedCommandCommandContextCommandExamples{wrapped: wrapped}
	case !okCommandUsage && !okCommandContext && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandDescription && okCommandExamples && !okCommandFlags && !okCommandHook:
		return &wrappedCommandCommandDescriptionCommandExamples{wrapped: wrapped}
	case okCommandContext && !okCommandFlags && !okCommandHook && !okCommandPersistentHook && !okCommandUsage && okCommandDescription && okCommandExamples && !okCommandPersistentFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamples{wrapped: wrapped}
	case !okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook && !okCommandDescription && okCommandFlags && !okCommandUsage && !okCommandContext && !okCommandExamples:
		return &wrappedCommandCommandFlags{wrapped: wrapped}
	case !okCommandPersistentFlags && !okCommandPersistentHook && !okCommandUsage && !okCommandExamples && okCommandFlags && !okCommandHook && okCommandContext && !okCommandDescription:
		return &wrappedCommandCommandContextCommandFlags{wrapped: wrapped}
	case okCommandFlags && !okCommandPersistentFlags && !okCommandUsage && !okCommandContext && !okCommandHook && !okCommandPersistentHook && okCommandDescription && !okCommandExamples:
		return &wrappedCommandCommandDescriptionCommandFlags{wrapped: wrapped}
	case okCommandContext && okCommandDescription && !okCommandExamples && !okCommandPersistentHook && !okCommandUsage && okCommandFlags && !okCommandHook && !okCommandPersistentFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlags{wrapped: wrapped}
	case !okCommandPersistentHook && !okCommandUsage && okCommandExamples && !okCommandPersistentFlags && !okCommandContext && !okCommandDescription && okCommandFlags && !okCommandHook:
		return &wrappedCommandCommandExamplesCommandFlags{wrapped: wrapped}
	case okCommandExamples && okCommandFlags && !okCommandHook && !okCommandPersistentFlags && !okCommandUsage && okCommandContext && !okCommandDescription && !okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandExamplesCommandFlags{wrapped: wrapped}
	case !okCommandUsage && !okCommandContext && okCommandDescription && okCommandFlags && okCommandExamples && !okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlags{wrapped: wrapped}
	case !okCommandPersistentFlags && !okCommandUsage && okCommandContext && okCommandDescription && !okCommandPersistentHook && okCommandExamples && okCommandFlags && !okCommandHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlags{wrapped: wrapped}
	case !okCommandContext && !okCommandPersistentFlags && !okCommandDescription && !okCommandExamples && !okCommandFlags && okCommandHook && !okCommandPersistentHook && !okCommandUsage:
		return &wrappedCommandCommandHook{wrapped: wrapped}
	case !okCommandFlags && okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandContext && !okCommandUsage && !okCommandDescription && !okCommandExamples:
		return &wrappedCommandCommandContextCommandHook{wrapped: wrapped}
	case !okCommandContext && okCommandDescription && !okCommandExamples && okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook && !okCommandUsage && !okCommandFlags:
		return &wrappedCommandCommandDescriptionCommandHook{wrapped: wrapped}
	case okCommandContext && okCommandDescription && !okCommandPersistentFlags && !okCommandUsage && !okCommandExamples && !okCommandFlags && okCommandHook && !okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandHook{wrapped: wrapped}
	case !okCommandUsage && okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook && !okCommandContext && !okCommandDescription && okCommandExamples && !okCommandFlags:
		return &wrappedCommandCommandExamplesCommandHook{wrapped: wrapped}
	case !okCommandPersistentFlags && !okCommandPersistentHook && !okCommandUsage && okCommandContext && !okCommandDescription && okCommandExamples && !okCommandFlags && okCommandHook:
		return &wrappedCommandCommandContextCommandExamplesCommandHook{wrapped: wrapped}
	case !okCommandContext && okCommandExamples && okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook && !okCommandUsage && okCommandDescription && !okCommandFlags:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandHook{wrapped: wrapped}
	case okCommandHook && !okCommandPersistentHook && okCommandContext && okCommandExamples && !okCommandFlags && !okCommandPersistentFlags && !okCommandUsage && okCommandDescription:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHook{wrapped: wrapped}
	case !okCommandDescription && !okCommandExamples && okCommandFlags && okCommandHook && !okCommandPersistentFlags && !okCommandUsage && !okCommandContext && !okCommandPersistentHook:
		return &wrappedCommandCommandFlagsCommandHook{wrapped: wrapped}
	case okCommandFlags && okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandContext && !okCommandUsage && !okCommandDescription && !okCommandExamples:
		return &wrappedCommandCommandContextCommandFlagsCommandHook{wrapped: wrapped}
	case !okCommandExamples && okCommandFlags && okCommandHook && !okCommandPersistentHook && !okCommandUsage && !okCommandContext && okCommandDescription && !okCommandPersistentFlags:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandHook{wrapped: wrapped}
	case okCommandDescription && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandContext && !okCommandExamples && okCommandFlags && okCommandHook && !okCommandUsage:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHook{wrapped: wrapped}
	case okCommandExamples && okCommandFlags && !okCommandPersistentHook && !okCommandDescription && okCommandHook && !okCommandPersistentFlags && !okCommandUsage && !okCommandContext:
		return &wrappedCommandCommandExamplesCommandFlagsCommandHook{wrapped: wrapped}
	case !okCommandPersistentFlags && !okCommandUsage && okCommandContext && !okCommandDescription && okCommandFlags && !okCommandPersistentHook && okCommandExamples && okCommandHook:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHook{wrapped: wrapped}
	case okCommandExamples && okCommandHook && !okCommandPersistentHook && !okCommandUsage && !okCommandContext && okCommandDescription && okCommandFlags && !okCommandPersistentFlags:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHook{wrapped: wrapped}
	case okCommandHook && !okCommandPersistentFlags && !okCommandUsage && okCommandContext && okCommandExamples && okCommandFlags && !okCommandPersistentHook && okCommandDescription:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHook{wrapped: wrapped}
	case !okCommandFlags && !okCommandHook && okCommandPersistentFlags && !okCommandPersistentHook && !okCommandDescription && !okCommandExamples && !okCommandUsage && !okCommandContext:
		return &wrappedCommandCommandPersistentFlags{wrapped: wrapped}
	case okCommandContext && !okCommandFlags && okCommandPersistentFlags && !okCommandPersistentHook && !okCommandUsage && !okCommandDescription && !okCommandExamples && !okCommandHook:
		return &wrappedCommandCommandContextCommandPersistentFlags{wrapped: wrapped}
	case !okCommandContext && okCommandDescription && !okCommandExamples && !okCommandHook && okCommandPersistentFlags && !okCommandPersistentHook && !okCommandFlags && !okCommandUsage:
		return &wrappedCommandCommandDescriptionCommandPersistentFlags{wrapped: wrapped}
	case !okCommandUsage && okCommandContext && okCommandDescription && !okCommandExamples && okCommandPersistentFlags && !okCommandPersistentHook && !okCommandFlags && !okCommandHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandPersistentFlags{wrapped: wrapped}
	case !okCommandPersistentHook && !okCommandContext && okCommandExamples && !okCommandHook && !okCommandUsage && !okCommandDescription && !okCommandFlags && okCommandPersistentFlags:
		return &wrappedCommandCommandExamplesCommandPersistentFlags{wrapped: wrapped}
	case !okCommandUsage && !okCommandDescription && okCommandExamples && !okCommandHook && okCommandContext && !okCommandFlags && okCommandPersistentFlags && !okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandExamplesCommandPersistentFlags{wrapped: wrapped}
	case !okCommandHook && okCommandPersistentFlags && okCommandExamples && !okCommandFlags && !okCommandPersistentHook && !okCommandUsage && !okCommandContext && okCommandDescription:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlags{wrapped: wrapped}
	case okCommandContext && okCommandDescription && !okCommandFlags && !okCommandHook && okCommandPersistentFlags && !okCommandUsage && okCommandExamples && !okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlags{wrapped: wrapped}
	case !okCommandExamples && okCommandFlags && okCommandPersistentFlags && !okCommandUsage && !okCommandContext && !okCommandHook && !okCommandPersistentHook && !okCommandDescription:
		return &wrappedCommandCommandFlagsCommandPersistentFlags{wrapped: wrapped}
	case !okCommandPersistentHook && !okCommandUsage && !okCommandExamples && okCommandContext && !okCommandDescription && okCommandFlags && !okCommandHook && okCommandPersistentFlags:
		return &wrappedCommandCommandContextCommandFlagsCommandPersistentFlags{wrapped: wrapped}
	case !okCommandPersistentHook && !okCommandContext && okCommandDescription && !okCommandExamples && !okCommandHook && okCommandPersistentFlags && !okCommandUsage && okCommandFlags:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlags{wrapped: wrapped}
	case !okCommandUsage && okCommandContext && okCommandDescription && !okCommandExamples && okCommandFlags && !okCommandHook && okCommandPersistentFlags && !okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlags{wrapped: wrapped}
	case !okCommandHook && okCommandPersistentFlags && !okCommandContext && !okCommandPersistentHook && !okCommandUsage && !okCommandDescription && okCommandExamples && okCommandFlags:
		return &wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlags{wrapped: wrapped}
	case !okCommandHook && okCommandContext && okCommandFlags && okCommandPersistentFlags && !okCommandPersistentHook && !okCommandUsage && !okCommandDescription && okCommandExamples:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlags{wrapped: wrapped}
	case okCommandExamples && !okCommandUsage && !okCommandContext && okCommandFlags && !okCommandHook && okCommandPersistentFlags && !okCommandPersistentHook && okCommandDescription:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags{wrapped: wrapped}
	case okCommandDescription && okCommandExamples && okCommandFlags && !okCommandPersistentHook && !okCommandUsage && !okCommandHook && okCommandPersistentFlags && okCommandContext:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags{wrapped: wrapped}
	case !okCommandDescription && okCommandPersistentFlags && !okCommandUsage && !okCommandExamples && !okCommandFlags && okCommandHook && !okCommandPersistentHook && !okCommandContext:
		return &wrappedCommandCommandHookCommandPersistentFlags{wrapped: wrapped}
	case !okCommandExamples && !okCommandFlags && okCommandHook && okCommandPersistentFlags && okCommandContext && !okCommandDescription && !okCommandPersistentHook && !okCommandUsage:
		return &wrappedCommandCommandContextCommandHookCommandPersistentFlags{wrapped: wrapped}
	case okCommandHook && okCommandPersistentFlags && !okCommandContext && okCommandDescription && !okCommandPersistentHook && !okCommandUsage && !okCommandExamples && !okCommandFlags:
		return &wrappedCommandCommandDescriptionCommandHookCommandPersistentFlags{wrapped: wrapped}
	case okCommandHook && !okCommandPersistentHook && okCommandContext && okCommandDescription && !okCommandExamples && okCommandPersistentFlags && !okCommandUsage && !okCommandFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlags{wrapped: wrapped}
	case !okCommandUsage && !okCommandContext && !okCommandDescription && okCommandExamples && okCommandHook && !okCommandFlags && okCommandPersistentFlags && !okCommandPersistentHook:
		return &wrappedCommandCommandExamplesCommandHookCommandPersistentFlags{wrapped: wrapped}
	case !okCommandDescription && okCommandExamples && !okCommandFlags && okCommandHook && !okCommandUsage && okCommandContext && okCommandPersistentFlags && !okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlags{wrapped: wrapped}
	case okCommandExamples && okCommandHook && !okCommandPersistentHook && !okCommandUsage && okCommandDescription && !okCommandFlags && okCommandPersistentFlags && !okCommandContext:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags{wrapped: wrapped}
	case okCommandDescription && !okCommandFlags && okCommandHook && okCommandPersistentFlags && !okCommandUsage && okCommandContext && okCommandExamples && !okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags{wrapped: wrapped}
	case okCommandHook && okCommandPersistentFlags && !okCommandUsage && okCommandFlags && !okCommandPersistentHook && !okCommandContext && !okCommandDescription && !okCommandExamples:
		return &wrappedCommandCommandFlagsCommandHookCommandPersistentFlags{wrapped: wrapped}
	case okCommandHook && okCommandPersistentFlags && !okCommandExamples && !okCommandPersistentHook && !okCommandUsage && okCommandContext && !okCommandDescription && okCommandFlags:
		return &wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlags{wrapped: wrapped}
	case !okCommandPersistentHook && !okCommandExamples && !okCommandUsage && !okCommandContext && okCommandDescription && okCommandFlags && okCommandHook && okCommandPersistentFlags:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags{wrapped: wrapped}
	case okCommandContext && okCommandDescription && okCommandHook && !okCommandPersistentHook && !okCommandExamples && okCommandFlags && okCommandPersistentFlags && !okCommandUsage:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags{wrapped: wrapped}
	case !okCommandContext && okCommandExamples && okCommandFlags && !okCommandPersistentHook && !okCommandDescription && okCommandHook && okCommandPersistentFlags && !okCommandUsage:
		return &wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlags{wrapped: wrapped}
	case okCommandExamples && okCommandFlags && okCommandHook && okCommandPersistentFlags && !okCommandPersistentHook && !okCommandUsage && okCommandContext && !okCommandDescription:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlags{wrapped: wrapped}
	case okCommandFlags && okCommandPersistentFlags && !okCommandContext && okCommandDescription && okCommandExamples && okCommandHook && !okCommandPersistentHook && !okCommandUsage:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags{wrapped: wrapped}
	case !okCommandUsage && okCommandContext && okCommandExamples && okCommandFlags && okCommandHook && !okCommandPersistentHook && okCommandDescription && okCommandPersistentFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags{wrapped: wrapped}
	case !okCommandExamples && !okCommandHook && okCommandPersistentHook && !okCommandContext && !okCommandFlags && !okCommandPersistentFlags && !okCommandUsage && !okCommandDescription:
		return &wrappedCommandCommandPersistentHook{wrapped: wrapped}
	case okCommandPersistentHook && !okCommandUsage && okCommandContext && !okCommandDescription && !okCommandHook && !okCommandPersistentFlags && !okCommandExamples && !okCommandFlags:
		return &wrappedCommandCommandContextCommandPersistentHook{wrapped: wrapped}
	case !okCommandUsage && okCommandDescription && !okCommandFlags && !okCommandPersistentFlags && !okCommandContext && !okCommandExamples && !okCommandHook && okCommandPersistentHook:
		return &wrappedCommandCommandDescriptionCommandPersistentHook{wrapped: wrapped}
	case !okCommandUsage && okCommandContext && okCommandDescription && !okCommandExamples && !okCommandFlags && !okCommandHook && !okCommandPersistentFlags && okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandPersistentHook{wrapped: wrapped}
	case !okCommandContext && !okCommandDescription && !okCommandHook && !okCommandPersistentFlags && !okCommandUsage && okCommandExamples && !okCommandFlags && okCommandPersistentHook:
		return &wrappedCommandCommandExamplesCommandPersistentHook{wrapped: wrapped}
	case okCommandPersistentHook && okCommandContext && !okCommandDescription && !okCommandPersistentFlags && !okCommandUsage && okCommandExamples && !okCommandFlags && !okCommandHook:
		return &wrappedCommandCommandContextCommandExamplesCommandPersistentHook{wrapped: wrapped}
	case !okCommandHook && !okCommandUsage && okCommandDescription && okCommandExamples && !okCommandFlags && !okCommandPersistentFlags && okCommandPersistentHook && !okCommandContext:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandPersistentHook{wrapped: wrapped}
	case !okCommandHook && !okCommandUsage && okCommandContext && !okCommandPersistentFlags && okCommandPersistentHook && okCommandDescription && okCommandExamples && !okCommandFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHook{wrapped: wrapped}
	case !okCommandUsage && okCommandPersistentHook && !okCommandContext && !okCommandDescription && !okCommandExamples && okCommandFlags && !okCommandHook && !okCommandPersistentFlags:
		return &wrappedCommandCommandFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandUsage && okCommandContext && okCommandFlags && !okCommandHook && okCommandPersistentHook && !okCommandDescription && !okCommandExamples && !okCommandPersistentFlags:
		return &wrappedCommandCommandContextCommandFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandExamples && !okCommandHook && !okCommandUsage && !okCommandContext && okCommandDescription && okCommandFlags && !okCommandPersistentFlags && okCommandPersistentHook:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandDescription && okCommandFlags && !okCommandHook && okCommandPersistentHook && okCommandContext && !okCommandExamples && !okCommandPersistentFlags && !okCommandUsage:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandDescription && okCommandExamples && okCommandFlags && !okCommandHook && okCommandPersistentHook && !okCommandContext && !okCommandPersistentFlags && !okCommandUsage:
		return &wrappedCommandCommandExamplesCommandFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandPersistentFlags && !okCommandDescription && okCommandExamples && okCommandFlags && !okCommandHook && okCommandPersistentHook && !okCommandUsage && okCommandContext:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandPersistentHook && !okCommandContext && okCommandDescription && okCommandExamples && !okCommandUsage && okCommandFlags && !okCommandHook && !okCommandPersistentFlags:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandDescription && okCommandExamples && !okCommandPersistentFlags && okCommandPersistentHook && okCommandContext && okCommandFlags && !okCommandHook && !okCommandUsage:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandHook && okCommandPersistentHook && !okCommandDescription && !okCommandFlags && !okCommandPersistentFlags && !okCommandUsage && !okCommandContext && !okCommandExamples:
		return &wrappedCommandCommandHookCommandPersistentHook{wrapped: wrapped}
	case !okCommandExamples && okCommandPersistentHook && okCommandContext && !okCommandFlags && okCommandHook && !okCommandPersistentFlags && !okCommandUsage && !okCommandDescription:
		return &wrappedCommandCommandContextCommandHookCommandPersistentHook{wrapped: wrapped}
	case okCommandPersistentHook && okCommandDescription && !okCommandFlags && !okCommandUsage && !okCommandContext && !okCommandExamples && okCommandHook && !okCommandPersistentFlags:
		return &wrappedCommandCommandDescriptionCommandHookCommandPersistentHook{wrapped: wrapped}
	case okCommandHook && okCommandPersistentHook && !okCommandUsage && okCommandDescription && !okCommandExamples && !okCommandPersistentFlags && okCommandContext && !okCommandFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHook{wrapped: wrapped}
	case okCommandExamples && !okCommandPersistentFlags && !okCommandUsage && !okCommandContext && !okCommandFlags && okCommandHook && okCommandPersistentHook && !okCommandDescription:
		return &wrappedCommandCommandExamplesCommandHookCommandPersistentHook{wrapped: wrapped}
	case !okCommandFlags && okCommandHook && !okCommandPersistentFlags && okCommandPersistentHook && !okCommandUsage && okCommandContext && !okCommandDescription && okCommandExamples:
		return &wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHook{wrapped: wrapped}
	case okCommandDescription && okCommandHook && !okCommandUsage && okCommandExamples && !okCommandFlags && !okCommandPersistentFlags && okCommandPersistentHook && !okCommandContext:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHook{wrapped: wrapped}
	case !okCommandPersistentFlags && okCommandDescription && okCommandExamples && !okCommandFlags && okCommandPersistentHook && !okCommandUsage && okCommandContext && okCommandHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHook{wrapped: wrapped}
	case !okCommandUsage && !okCommandDescription && !okCommandExamples && okCommandFlags && okCommandPersistentHook && !okCommandContext && okCommandHook && !okCommandPersistentFlags:
		return &wrappedCommandCommandFlagsCommandHookCommandPersistentHook{wrapped: wrapped}
	case okCommandHook && !okCommandPersistentFlags && okCommandPersistentHook && !okCommandUsage && okCommandContext && okCommandFlags && !okCommandDescription && !okCommandExamples:
		return &wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHook{wrapped: wrapped}
	case !okCommandContext && okCommandDescription && !okCommandExamples && okCommandFlags && okCommandHook && !okCommandPersistentFlags && okCommandPersistentHook && !okCommandUsage:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHook{wrapped: wrapped}
	case okCommandFlags && okCommandHook && okCommandPersistentHook && okCommandContext && !okCommandPersistentFlags && !okCommandUsage && okCommandDescription && !okCommandExamples:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHook{wrapped: wrapped}
	case okCommandPersistentHook && okCommandExamples && okCommandFlags && okCommandHook && !okCommandPersistentFlags && !okCommandUsage && !okCommandContext && !okCommandDescription:
		return &wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHook{wrapped: wrapped}
	case okCommandHook && !okCommandUsage && !okCommandDescription && okCommandExamples && !okCommandPersistentFlags && okCommandPersistentHook && okCommandContext && okCommandFlags:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHook{wrapped: wrapped}
	case okCommandDescription && okCommandHook && !okCommandPersistentFlags && !okCommandUsage && !okCommandContext && okCommandExamples && okCommandFlags && okCommandPersistentHook:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook{wrapped: wrapped}
	case !okCommandUsage && okCommandContext && okCommandDescription && !okCommandPersistentFlags && okCommandPersistentHook && okCommandExamples && okCommandFlags && okCommandHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook{wrapped: wrapped}
	case !okCommandUsage && !okCommandFlags && okCommandPersistentFlags && okCommandPersistentHook && !okCommandContext && !okCommandDescription && !okCommandExamples && !okCommandHook:
		return &wrappedCommandCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandFlags && !okCommandHook && okCommandPersistentFlags && okCommandPersistentHook && !okCommandUsage && okCommandContext && !okCommandDescription && !okCommandExamples:
		return &wrappedCommandCommandContextCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandHook && okCommandPersistentHook && !okCommandContext && !okCommandExamples && !okCommandFlags && okCommandPersistentFlags && !okCommandUsage && okCommandDescription:
		return &wrappedCommandCommandDescriptionCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandPersistentFlags && !okCommandUsage && okCommandContext && !okCommandExamples && !okCommandFlags && !okCommandHook && okCommandPersistentHook && okCommandDescription:
		return &wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandDescription && okCommandExamples && !okCommandFlags && !okCommandHook && okCommandPersistentHook && !okCommandUsage && okCommandPersistentFlags && !okCommandContext:
		return &wrappedCommandCommandExamplesCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandFlags && okCommandPersistentFlags && okCommandPersistentHook && okCommandContext && !okCommandDescription && okCommandExamples && !okCommandHook && !okCommandUsage:
		return &wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandDescription && okCommandExamples && !okCommandHook && !okCommandUsage && !okCommandContext && !okCommandFlags && okCommandPersistentFlags && okCommandPersistentHook:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandHook && okCommandExamples && !okCommandFlags && okCommandPersistentFlags && okCommandPersistentHook && !okCommandUsage && okCommandContext && okCommandDescription:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandHook && okCommandPersistentHook && !okCommandUsage && !okCommandContext && !okCommandDescription && okCommandPersistentFlags && !okCommandExamples && okCommandFlags:
		return &wrappedCommandCommandFlagsCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandPersistentHook && !okCommandUsage && okCommandContext && !okCommandExamples && okCommandFlags && okCommandPersistentFlags && !okCommandDescription && !okCommandHook:
		return &wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandPersistentFlags && okCommandPersistentHook && !okCommandUsage && !okCommandContext && okCommandDescription && !okCommandExamples && okCommandFlags && !okCommandHook:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandUsage && okCommandDescription && !okCommandHook && okCommandPersistentHook && okCommandContext && !okCommandExamples && okCommandFlags && okCommandPersistentFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandFlags && !okCommandHook && okCommandPersistentFlags && okCommandPersistentHook && !okCommandUsage && !okCommandContext && !okCommandDescription && okCommandExamples:
		return &wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandHook && okCommandPersistentFlags && okCommandPersistentHook && !okCommandUsage && okCommandContext && okCommandFlags && !okCommandDescription && okCommandExamples:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandUsage && okCommandExamples && okCommandFlags && !okCommandHook && okCommandPersistentHook && !okCommandContext && okCommandDescription && okCommandPersistentFlags:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandPersistentFlags && okCommandContext && okCommandDescription && okCommandFlags && !okCommandHook && okCommandPersistentHook && !okCommandUsage && okCommandExamples:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandContext && !okCommandDescription && !okCommandExamples && okCommandPersistentFlags && okCommandPersistentHook && !okCommandFlags && okCommandHook && !okCommandUsage:
		return &wrappedCommandCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandPersistentFlags && okCommandPersistentHook && !okCommandUsage && !okCommandDescription && !okCommandExamples && okCommandHook && okCommandContext && !okCommandFlags:
		return &wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandHook && okCommandPersistentFlags && !okCommandUsage && !okCommandContext && okCommandDescription && !okCommandExamples && !okCommandFlags && okCommandPersistentHook:
		return &wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandPersistentHook && okCommandContext && okCommandDescription && !okCommandFlags && okCommandHook && okCommandPersistentFlags && !okCommandUsage && !okCommandExamples:
		return &wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandUsage && !okCommandContext && !okCommandDescription && okCommandHook && okCommandExamples && !okCommandFlags && okCommandPersistentFlags && okCommandPersistentHook:
		return &wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandDescription && okCommandExamples && okCommandPersistentFlags && okCommandPersistentHook && !okCommandFlags && okCommandHook && !okCommandUsage && okCommandContext:
		return &wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandUsage && !okCommandContext && okCommandDescription && !okCommandFlags && okCommandHook && okCommandPersistentFlags && okCommandExamples && okCommandPersistentHook:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandFlags && okCommandHook && okCommandPersistentFlags && !okCommandUsage && okCommandContext && okCommandPersistentHook && okCommandDescription && okCommandExamples:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandFlags && okCommandHook && okCommandPersistentHook && !okCommandDescription && !okCommandExamples && okCommandPersistentFlags && !okCommandUsage && !okCommandContext:
		return &wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandContext && !okCommandDescription && !okCommandUsage && !okCommandExamples && okCommandFlags && okCommandHook && okCommandPersistentFlags && okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandContext && okCommandHook && okCommandPersistentHook && !okCommandUsage && okCommandDescription && !okCommandExamples && okCommandFlags && okCommandPersistentFlags:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandPersistentFlags && !okCommandUsage && okCommandContext && okCommandDescription && !okCommandExamples && okCommandHook && okCommandPersistentHook && okCommandFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandDescription && okCommandPersistentFlags && !okCommandUsage && !okCommandContext && okCommandExamples && okCommandFlags && okCommandHook && okCommandPersistentHook:
		return &wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandHook && okCommandPersistentFlags && !okCommandDescription && okCommandPersistentHook && !okCommandUsage && okCommandContext && okCommandExamples && okCommandFlags:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandHook && okCommandPersistentFlags && okCommandPersistentHook && !okCommandUsage && !okCommandContext && okCommandExamples && okCommandFlags && okCommandDescription:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case okCommandContext && okCommandDescription && okCommandExamples && okCommandFlags && okCommandPersistentFlags && okCommandPersistentHook && okCommandHook && !okCommandUsage:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook{wrapped: wrapped}
	case !okCommandContext && !okCommandFlags && !okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && !okCommandDescription && !okCommandExamples:
		return &wrappedCommandCommandUsage{wrapped: wrapped}
	case okCommandUsage && okCommandContext && !okCommandFlags && !okCommandHook && !okCommandPersistentHook && !okCommandDescription && !okCommandExamples && !okCommandPersistentFlags:
		return &wrappedCommandCommandContextCommandUsage{wrapped: wrapped}
	case okCommandUsage && !okCommandContext && !okCommandFlags && !okCommandPersistentHook && okCommandDescription && !okCommandExamples && !okCommandHook && !okCommandPersistentFlags:
		return &wrappedCommandCommandDescriptionCommandUsage{wrapped: wrapped}
	case !okCommandExamples && !okCommandHook && !okCommandPersistentFlags && okCommandUsage && okCommandContext && !okCommandFlags && !okCommandPersistentHook && okCommandDescription:
		return &wrappedCommandCommandContextCommandDescriptionCommandUsage{wrapped: wrapped}
	case okCommandUsage && !okCommandContext && okCommandExamples && !okCommandFlags && !okCommandHook && !okCommandPersistentFlags && !okCommandDescription && !okCommandPersistentHook:
		return &wrappedCommandCommandExamplesCommandUsage{wrapped: wrapped}
	case okCommandUsage && okCommandContext && okCommandExamples && !okCommandFlags && !okCommandDescription && !okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandExamplesCommandUsage{wrapped: wrapped}
	case okCommandExamples && !okCommandFlags && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && !okCommandHook && !okCommandContext && okCommandDescription:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandUsage{wrapped: wrapped}
	case okCommandUsage && okCommandContext && okCommandDescription && okCommandExamples && !okCommandFlags && !okCommandPersistentFlags && !okCommandPersistentHook && !okCommandHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandUsage{wrapped: wrapped}
	case !okCommandPersistentFlags && okCommandUsage && !okCommandExamples && okCommandFlags && !okCommandPersistentHook && !okCommandContext && !okCommandDescription && !okCommandHook:
		return &wrappedCommandCommandFlagsCommandUsage{wrapped: wrapped}
	case okCommandFlags && !okCommandPersistentFlags && okCommandUsage && okCommandContext && !okCommandDescription && !okCommandExamples && !okCommandHook && !okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandFlagsCommandUsage{wrapped: wrapped}
	case !okCommandContext && okCommandDescription && okCommandFlags && !okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && !okCommandExamples:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandUsage{wrapped: wrapped}
	case !okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && okCommandDescription && !okCommandExamples && okCommandFlags && !okCommandHook && okCommandContext:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandUsage{wrapped: wrapped}
	case okCommandFlags && !okCommandPersistentHook && !okCommandContext && okCommandExamples && !okCommandHook && !okCommandPersistentFlags && okCommandUsage && !okCommandDescription:
		return &wrappedCommandCommandExamplesCommandFlagsCommandUsage{wrapped: wrapped}
	case !okCommandDescription && okCommandExamples && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && okCommandFlags && !okCommandHook && okCommandContext:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandUsage{wrapped: wrapped}
	case !okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && !okCommandContext && okCommandExamples && okCommandDescription && okCommandFlags && !okCommandHook:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandUsage{wrapped: wrapped}
	case !okCommandPersistentFlags && !okCommandPersistentHook && okCommandContext && okCommandDescription && okCommandExamples && okCommandFlags && okCommandUsage && !okCommandHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandUsage{wrapped: wrapped}
	case !okCommandDescription && !okCommandFlags && okCommandHook && !okCommandPersistentHook && okCommandUsage && !okCommandContext && !okCommandExamples && !okCommandPersistentFlags:
		return &wrappedCommandCommandHookCommandUsage{wrapped: wrapped}
	case !okCommandExamples && !okCommandFlags && okCommandHook && okCommandContext && !okCommandDescription && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage:
		return &wrappedCommandCommandContextCommandHookCommandUsage{wrapped: wrapped}
	case !okCommandContext && okCommandDescription && !okCommandExamples && !okCommandFlags && okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage:
		return &wrappedCommandCommandDescriptionCommandHookCommandUsage{wrapped: wrapped}
	case okCommandContext && okCommandDescription && !okCommandExamples && !okCommandFlags && okCommandHook && !okCommandPersistentHook && okCommandUsage && !okCommandPersistentFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandHookCommandUsage{wrapped: wrapped}
	case !okCommandFlags && okCommandHook && !okCommandPersistentHook && okCommandUsage && !okCommandContext && !okCommandDescription && okCommandExamples && !okCommandPersistentFlags:
		return &wrappedCommandCommandExamplesCommandHookCommandUsage{wrapped: wrapped}
	case okCommandContext && !okCommandDescription && okCommandExamples && !okCommandFlags && okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage:
		return &wrappedCommandCommandContextCommandExamplesCommandHookCommandUsage{wrapped: wrapped}
	case !okCommandPersistentHook && okCommandUsage && !okCommandContext && okCommandExamples && !okCommandFlags && okCommandHook && okCommandDescription && !okCommandPersistentFlags:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandUsage{wrapped: wrapped}
	case okCommandHook && okCommandUsage && okCommandContext && okCommandExamples && !okCommandFlags && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandDescription:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandUsage{wrapped: wrapped}
	case !okCommandPersistentHook && okCommandUsage && !okCommandDescription && !okCommandExamples && !okCommandContext && okCommandFlags && okCommandHook && !okCommandPersistentFlags:
		return &wrappedCommandCommandFlagsCommandHookCommandUsage{wrapped: wrapped}
	case !okCommandPersistentHook && okCommandUsage && okCommandContext && !okCommandExamples && !okCommandPersistentFlags && !okCommandDescription && okCommandFlags && okCommandHook:
		return &wrappedCommandCommandContextCommandFlagsCommandHookCommandUsage{wrapped: wrapped}
	case !okCommandContext && !okCommandExamples && okCommandHook && okCommandUsage && okCommandDescription && okCommandFlags && !okCommandPersistentFlags && !okCommandPersistentHook:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandUsage{wrapped: wrapped}
	case okCommandHook && okCommandDescription && !okCommandExamples && okCommandFlags && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && okCommandContext:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandUsage{wrapped: wrapped}
	case !okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && !okCommandContext && okCommandHook && !okCommandDescription && okCommandExamples && okCommandFlags:
		return &wrappedCommandCommandExamplesCommandFlagsCommandHookCommandUsage{wrapped: wrapped}
	case okCommandHook && !okCommandPersistentHook && okCommandExamples && !okCommandPersistentFlags && okCommandUsage && okCommandContext && !okCommandDescription && okCommandFlags:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandUsage{wrapped: wrapped}
	case !okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && !okCommandContext && okCommandDescription && okCommandExamples && okCommandFlags && okCommandHook:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage{wrapped: wrapped}
	case okCommandFlags && okCommandUsage && okCommandDescription && okCommandExamples && okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook && okCommandContext:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage{wrapped: wrapped}
	case !okCommandExamples && !okCommandFlags && okCommandPersistentFlags && !okCommandPersistentHook && !okCommandDescription && !okCommandHook && okCommandUsage && !okCommandContext:
		return &wrappedCommandCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case !okCommandDescription && !okCommandExamples && !okCommandFlags && !okCommandHook && okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && okCommandContext:
		return &wrappedCommandCommandContextCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case !okCommandHook && okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && !okCommandContext && !okCommandFlags && okCommandDescription && !okCommandExamples:
		return &wrappedCommandCommandDescriptionCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case !okCommandHook && okCommandUsage && !okCommandExamples && okCommandPersistentFlags && !okCommandPersistentHook && okCommandContext && okCommandDescription && !okCommandFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case !okCommandHook && okCommandPersistentFlags && okCommandExamples && !okCommandFlags && !okCommandPersistentHook && okCommandUsage && !okCommandContext && !okCommandDescription:
		return &wrappedCommandCommandExamplesCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case !okCommandDescription && okCommandExamples && !okCommandFlags && !okCommandHook && okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && okCommandContext:
		return &wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandDescription && okCommandExamples && !okCommandFlags && !okCommandHook && okCommandUsage && okCommandPersistentFlags && !okCommandPersistentHook && !okCommandContext:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandPersistentFlags && okCommandUsage && okCommandContext && okCommandDescription && !okCommandPersistentHook && okCommandExamples && !okCommandFlags && !okCommandHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case !okCommandPersistentHook && okCommandUsage && !okCommandExamples && okCommandFlags && !okCommandHook && okCommandPersistentFlags && !okCommandContext && !okCommandDescription:
		return &wrappedCommandCommandFlagsCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandPersistentFlags && okCommandUsage && okCommandContext && !okCommandDescription && !okCommandExamples && !okCommandHook && !okCommandPersistentHook && okCommandFlags:
		return &wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandDescription && !okCommandExamples && okCommandFlags && !okCommandHook && okCommandPersistentFlags && okCommandUsage && !okCommandContext && !okCommandPersistentHook:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case !okCommandPersistentHook && okCommandContext && okCommandDescription && !okCommandExamples && okCommandFlags && !okCommandHook && okCommandPersistentFlags && okCommandUsage:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandFlags && okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && !okCommandDescription && okCommandExamples && !okCommandHook && !okCommandContext:
		return &wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandUsage && !okCommandDescription && okCommandPersistentFlags && !okCommandPersistentHook && okCommandContext && okCommandExamples && okCommandFlags && !okCommandHook:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case !okCommandPersistentHook && !okCommandContext && okCommandFlags && !okCommandHook && okCommandPersistentFlags && okCommandUsage && okCommandDescription && okCommandExamples:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandUsage && okCommandDescription && okCommandFlags && !okCommandHook && !okCommandPersistentHook && okCommandContext && okCommandExamples && okCommandPersistentFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandHook && okCommandPersistentFlags && okCommandUsage && !okCommandContext && !okCommandExamples && !okCommandFlags && !okCommandPersistentHook && !okCommandDescription:
		return &wrappedCommandCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case !okCommandFlags && okCommandPersistentFlags && !okCommandExamples && okCommandHook && !okCommandPersistentHook && okCommandUsage && okCommandContext && !okCommandDescription:
		return &wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandHook && okCommandUsage && !okCommandFlags && okCommandPersistentFlags && !okCommandPersistentHook && !okCommandContext && okCommandDescription && !okCommandExamples:
		return &wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandPersistentFlags && !okCommandPersistentHook && okCommandContext && !okCommandFlags && okCommandHook && okCommandUsage && okCommandDescription && !okCommandExamples:
		return &wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case !okCommandDescription && okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && !okCommandContext && okCommandExamples && !okCommandFlags && okCommandHook:
		return &wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandContext && !okCommandDescription && okCommandExamples && okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && !okCommandFlags && okCommandHook:
		return &wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case !okCommandPersistentHook && !okCommandContext && okCommandDescription && okCommandUsage && okCommandExamples && !okCommandFlags && okCommandHook && okCommandPersistentFlags:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandDescription && okCommandExamples && okCommandHook && okCommandUsage && okCommandContext && !okCommandFlags && okCommandPersistentFlags && !okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case !okCommandExamples && okCommandFlags && okCommandHook && okCommandPersistentFlags && !okCommandPersistentHook && okCommandUsage && !okCommandContext && !okCommandDescription:
		return &wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandUsage && !okCommandDescription && okCommandHook && okCommandPersistentFlags && !okCommandPersistentHook && okCommandContext && !okCommandExamples && okCommandFlags:
		return &wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandPersistentFlags && !okCommandPersistentHook && !okCommandContext && okCommandDescription && okCommandFlags && okCommandHook && okCommandUsage && !okCommandExamples:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandHook && okCommandPersistentFlags && okCommandUsage && okCommandContext && okCommandDescription && !okCommandExamples && !okCommandPersistentHook && okCommandFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandUsage && !okCommandContext && !okCommandDescription && okCommandExamples && okCommandHook && okCommandPersistentFlags && !okCommandPersistentHook && okCommandFlags:
		return &wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandHook && okCommandPersistentFlags && okCommandUsage && okCommandContext && !okCommandDescription && okCommandFlags && !okCommandPersistentHook && okCommandExamples:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandPersistentFlags && okCommandUsage && okCommandDescription && okCommandFlags && okCommandHook && !okCommandPersistentHook && !okCommandContext && okCommandExamples:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case okCommandFlags && okCommandHook && okCommandPersistentFlags && okCommandContext && okCommandExamples && !okCommandPersistentHook && okCommandUsage && okCommandDescription:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage{wrapped: wrapped}
	case !okCommandPersistentFlags && okCommandPersistentHook && !okCommandDescription && !okCommandFlags && !okCommandHook && okCommandUsage && !okCommandContext && !okCommandExamples:
		return &wrappedCommandCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandFlags && !okCommandHook && !okCommandPersistentFlags && okCommandUsage && !okCommandDescription && okCommandPersistentHook && okCommandContext && !okCommandExamples:
		return &wrappedCommandCommandContextCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && !okCommandFlags && !okCommandHook && !okCommandContext && okCommandDescription && !okCommandExamples:
		return &wrappedCommandCommandDescriptionCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandExamples && !okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && !okCommandFlags && !okCommandHook && okCommandContext && okCommandDescription:
		return &wrappedCommandCommandContextCommandDescriptionCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandFlags && !okCommandHook && !okCommandPersistentFlags && okCommandUsage && okCommandPersistentHook && !okCommandContext && !okCommandDescription && okCommandExamples:
		return &wrappedCommandCommandExamplesCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandContext && !okCommandFlags && !okCommandHook && !okCommandPersistentFlags && okCommandUsage && !okCommandDescription && okCommandExamples && okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandExamplesCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandExamples && !okCommandPersistentFlags && okCommandUsage && !okCommandContext && okCommandDescription && !okCommandFlags && !okCommandHook && okCommandPersistentHook:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandHook && okCommandPersistentHook && okCommandUsage && !okCommandFlags && !okCommandPersistentFlags && okCommandContext && okCommandDescription && okCommandExamples:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandDescription && !okCommandExamples && okCommandUsage && !okCommandContext && okCommandFlags && !okCommandHook && !okCommandPersistentFlags && okCommandPersistentHook:
		return &wrappedCommandCommandFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandContext && !okCommandDescription && okCommandFlags && !okCommandHook && !okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && !okCommandExamples:
		return &wrappedCommandCommandContextCommandFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandFlags && !okCommandPersistentFlags && okCommandUsage && !okCommandContext && !okCommandExamples && !okCommandHook && okCommandPersistentHook && okCommandDescription:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandPersistentHook && !okCommandPersistentFlags && okCommandUsage && okCommandContext && okCommandDescription && !okCommandExamples && okCommandFlags && !okCommandHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandContext && okCommandExamples && okCommandUsage && !okCommandDescription && okCommandFlags && !okCommandHook && !okCommandPersistentFlags && okCommandPersistentHook:
		return &wrappedCommandCommandExamplesCommandFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandContext && okCommandExamples && !okCommandHook && okCommandPersistentHook && !okCommandDescription && okCommandFlags && !okCommandPersistentFlags && okCommandUsage:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandHook && okCommandUsage && okCommandDescription && !okCommandPersistentFlags && okCommandPersistentHook && !okCommandContext && okCommandExamples && okCommandFlags:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandContext && okCommandDescription && okCommandFlags && !okCommandHook && okCommandPersistentHook && okCommandUsage && okCommandExamples && !okCommandPersistentFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandFlags && okCommandHook && !okCommandContext && !okCommandDescription && !okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && !okCommandExamples:
		return &wrappedCommandCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandHook && okCommandContext && !okCommandDescription && !okCommandExamples && !okCommandFlags && !okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage:
		return &wrappedCommandCommandContextCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandPersistentHook && okCommandDescription && okCommandHook && okCommandUsage && !okCommandContext && !okCommandExamples && !okCommandFlags && !okCommandPersistentFlags:
		return &wrappedCommandCommandDescriptionCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandContext && okCommandDescription && !okCommandExamples && !okCommandFlags && okCommandHook && okCommandPersistentHook && okCommandUsage && !okCommandPersistentFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandDescription && okCommandExamples && okCommandPersistentHook && !okCommandContext && !okCommandFlags && okCommandHook && !okCommandPersistentFlags && okCommandUsage:
		return &wrappedCommandCommandExamplesCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandContext && !okCommandDescription && !okCommandFlags && !okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && okCommandExamples && okCommandHook:
		return &wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandPersistentHook && okCommandUsage && okCommandDescription && okCommandExamples && !okCommandFlags && !okCommandContext && okCommandHook && !okCommandPersistentFlags:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandExamples && !okCommandFlags && okCommandHook && !okCommandPersistentFlags && okCommandContext && okCommandDescription && okCommandPersistentHook && okCommandUsage:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandHook && okCommandPersistentHook && okCommandUsage && !okCommandExamples && okCommandFlags && !okCommandPersistentFlags && !okCommandContext && !okCommandDescription:
		return &wrappedCommandCommandFlagsCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandContext && !okCommandDescription && !okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && !okCommandExamples && okCommandFlags && okCommandHook:
		return &wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandHook && okCommandPersistentHook && !okCommandContext && okCommandDescription && !okCommandPersistentFlags && okCommandUsage && !okCommandExamples && okCommandFlags:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandExamples && okCommandFlags && okCommandHook && !okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && okCommandContext && okCommandDescription:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandHook && !okCommandPersistentFlags && okCommandPersistentHook && okCommandExamples && okCommandFlags && okCommandUsage && !okCommandContext && !okCommandDescription:
		return &wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandDescription && okCommandExamples && okCommandFlags && !okCommandPersistentFlags && okCommandUsage && okCommandContext && okCommandHook && okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandHook && okCommandUsage && !okCommandContext && okCommandDescription && okCommandFlags && !okCommandPersistentFlags && okCommandPersistentHook && okCommandExamples:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandFlags && !okCommandPersistentFlags && okCommandPersistentHook && okCommandContext && okCommandExamples && okCommandHook && okCommandUsage && okCommandDescription:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandUsage && !okCommandContext && !okCommandDescription && okCommandPersistentHook && !okCommandExamples && !okCommandFlags && !okCommandHook && okCommandPersistentFlags:
		return &wrappedCommandCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandExamples && !okCommandHook && okCommandUsage && !okCommandFlags && okCommandPersistentFlags && okCommandPersistentHook && okCommandContext && !okCommandDescription:
		return &wrappedCommandCommandContextCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandContext && okCommandDescription && !okCommandExamples && !okCommandHook && okCommandPersistentFlags && !okCommandFlags && okCommandPersistentHook && okCommandUsage:
		return &wrappedCommandCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandPersistentHook && okCommandUsage && okCommandContext && okCommandDescription && !okCommandExamples && !okCommandFlags && okCommandPersistentFlags && !okCommandHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandDescription && !okCommandHook && okCommandPersistentFlags && okCommandUsage && okCommandExamples && !okCommandFlags && okCommandPersistentHook && !okCommandContext:
		return &wrappedCommandCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandPersistentHook && !okCommandDescription && okCommandExamples && !okCommandFlags && !okCommandHook && okCommandUsage && okCommandContext && okCommandPersistentFlags:
		return &wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandContext && okCommandDescription && !okCommandFlags && okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && okCommandExamples && !okCommandHook:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandPersistentHook && okCommandUsage && okCommandDescription && okCommandExamples && !okCommandHook && okCommandPersistentFlags && okCommandContext && !okCommandFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandExamples && !okCommandHook && okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && !okCommandContext && okCommandFlags && !okCommandDescription:
		return &wrappedCommandCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandPersistentHook && !okCommandHook && okCommandPersistentFlags && okCommandUsage && okCommandContext && !okCommandDescription && !okCommandExamples && okCommandFlags:
		return &wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandExamples && okCommandFlags && !okCommandHook && okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && !okCommandContext && okCommandDescription:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandUsage && okCommandContext && !okCommandExamples && okCommandFlags && !okCommandHook && okCommandPersistentFlags && okCommandPersistentHook && okCommandDescription:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandHook && okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && !okCommandContext && okCommandFlags && !okCommandDescription && okCommandExamples:
		return &wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandDescription && okCommandFlags && !okCommandHook && okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && okCommandExamples && okCommandContext:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandFlags && !okCommandContext && !okCommandHook && okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && okCommandDescription && okCommandExamples:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandDescription && okCommandFlags && okCommandContext && okCommandExamples && !okCommandHook && okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandExamples && okCommandHook && okCommandPersistentFlags && !okCommandFlags && okCommandPersistentHook && okCommandUsage && !okCommandContext && !okCommandDescription:
		return &wrappedCommandCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandUsage && okCommandContext && !okCommandDescription && !okCommandFlags && okCommandHook && okCommandPersistentFlags && !okCommandExamples && okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandExamples && okCommandPersistentFlags && okCommandUsage && !okCommandFlags && okCommandHook && okCommandPersistentHook && !okCommandContext && okCommandDescription:
		return &wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandExamples && !okCommandFlags && okCommandHook && okCommandDescription && okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && okCommandContext:
		return &wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandDescription && okCommandExamples && !okCommandFlags && okCommandHook && !okCommandContext && okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage:
		return &wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandPersistentHook && okCommandContext && !okCommandFlags && okCommandHook && okCommandPersistentFlags && okCommandUsage && !okCommandDescription && okCommandExamples:
		return &wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandExamples && !okCommandFlags && okCommandPersistentHook && okCommandUsage && !okCommandContext && okCommandDescription && okCommandHook && okCommandPersistentFlags:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandUsage && !okCommandFlags && okCommandPersistentHook && okCommandContext && okCommandDescription && okCommandExamples && okCommandHook && okCommandPersistentFlags:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandFlags && okCommandHook && okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && !okCommandContext && !okCommandDescription && !okCommandExamples:
		return &wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandExamples && okCommandFlags && okCommandPersistentFlags && okCommandContext && !okCommandDescription && okCommandHook && okCommandPersistentHook && okCommandUsage:
		return &wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandDescription && !okCommandExamples && okCommandPersistentFlags && okCommandUsage && okCommandFlags && okCommandHook && okCommandPersistentHook && !okCommandContext:
		return &wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandExamples && okCommandFlags && okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && okCommandHook && okCommandContext && okCommandDescription:
		return &wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandHook && okCommandPersistentFlags && okCommandPersistentHook && !okCommandContext && okCommandExamples && okCommandUsage && !okCommandDescription && okCommandFlags:
		return &wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandFlags && okCommandHook && okCommandContext && okCommandPersistentFlags && okCommandPersistentHook && okCommandUsage && !okCommandDescription && okCommandExamples:
		return &wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandPersistentFlags && okCommandUsage && !okCommandContext && okCommandDescription && okCommandHook && okCommandPersistentHook && okCommandExamples && okCommandFlags:
		return &wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case okCommandContext && okCommandDescription && okCommandExamples && okCommandPersistentFlags && okCommandUsage && okCommandFlags && okCommandHook && okCommandPersistentHook:
		return &wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage{wrapped: wrapped}
	case !okCommandExamples && !okCommandFlags && !okCommandHook && !okCommandPersistentFlags && !okCommandPersistentHook && !okCommandUsage && !okCommandContext && !okCommandDescription:
		return &wrappedCommand{wrapped: wrapped}
	default:
		panic("this should never happen")
	}
}

type wrappedCommand struct{ wrapped commandAllInterfaces }

func (r *wrappedCommand) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

type wrappedCommandCommandContext struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContext) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContext) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

type wrappedCommandCommandDescription struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescription) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}
func (r *wrappedCommandCommandDescription) Description() string { return r.wrapped.Description() }

type wrappedCommandCommandContextCommandDescription struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescription) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescription) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescription) Description() string {
	return r.wrapped.Description()
}

type wrappedCommandCommandExamples struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamples) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}
func (r *wrappedCommandCommandExamples) Examples() []string { return r.wrapped.Examples() }

type wrappedCommandCommandContextCommandExamples struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamples) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamples) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamples) Examples() []string {
	return r.wrapped.Examples()
}

type wrappedCommandCommandDescriptionCommandExamples struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamples) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamples) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamples) Examples() []string {
	return r.wrapped.Examples()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamples struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamples) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamples) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamples) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamples) Examples() []string {
	return r.wrapped.Examples()
}

type wrappedCommandCommandFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}
func (r *wrappedCommandCommandFlags) Flags() []cli.Flag { return r.wrapped.Flags() }

type wrappedCommandCommandContextCommandFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}
func (r *wrappedCommandCommandContextCommandFlags) Flags() []cli.Flag { return r.wrapped.Flags() }

type wrappedCommandCommandDescriptionCommandFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlags) Description() string {
	return r.wrapped.Description()
}
func (r *wrappedCommandCommandDescriptionCommandFlags) Flags() []cli.Flag { return r.wrapped.Flags() }

type wrappedCommandCommandContextCommandDescriptionCommandFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

type wrappedCommandCommandExamplesCommandFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}
func (r *wrappedCommandCommandExamplesCommandFlags) Examples() []string { return r.wrapped.Examples() }
func (r *wrappedCommandCommandExamplesCommandFlags) Flags() []cli.Flag  { return r.wrapped.Flags() }

type wrappedCommandCommandContextCommandExamplesCommandFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

type wrappedCommandCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}
func (r *wrappedCommandCommandHook) Hook() *cli.Hook { return r.wrapped.Hook() }

type wrappedCommandCommandContextCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}
func (r *wrappedCommandCommandContextCommandHook) Hook() *cli.Hook { return r.wrapped.Hook() }

type wrappedCommandCommandDescriptionCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandHook) Description() string {
	return r.wrapped.Description()
}
func (r *wrappedCommandCommandDescriptionCommandHook) Hook() *cli.Hook { return r.wrapped.Hook() }

type wrappedCommandCommandContextCommandDescriptionCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

type wrappedCommandCommandExamplesCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}
func (r *wrappedCommandCommandExamplesCommandHook) Examples() []string { return r.wrapped.Examples() }
func (r *wrappedCommandCommandExamplesCommandHook) Hook() *cli.Hook    { return r.wrapped.Hook() }

type wrappedCommandCommandContextCommandExamplesCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

type wrappedCommandCommandFlagsCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}
func (r *wrappedCommandCommandFlagsCommandHook) Flags() []cli.Flag { return r.wrapped.Flags() }
func (r *wrappedCommandCommandFlagsCommandHook) Hook() *cli.Hook   { return r.wrapped.Hook() }

type wrappedCommandCommandContextCommandFlagsCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

type wrappedCommandCommandExamplesCommandFlagsCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

type wrappedCommandCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandDescriptionCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandDescriptionCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandExamplesCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandExamplesCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandFlagsCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandFlagsCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandFlagsCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandFlagsCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}
func (r *wrappedCommandCommandHookCommandPersistentFlags) Hook() *cli.Hook { return r.wrapped.Hook() }
func (r *wrappedCommandCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandDescriptionCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandExamplesCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandFlagsCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlags) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

type wrappedCommandCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandExamplesCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandExamplesCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandExamplesCommandFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}
func (r *wrappedCommandCommandHookCommandPersistentHook) Hook() *cli.Hook { return r.wrapped.Hook() }
func (r *wrappedCommandCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandExamplesCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandFlagsCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandExamplesCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandExamplesCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandFlagsCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandFlagsCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHook) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

type wrappedCommandCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}
func (r *wrappedCommandCommandUsage) Usage() string { return r.wrapped.Usage() }

type wrappedCommandCommandContextCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}
func (r *wrappedCommandCommandContextCommandUsage) Usage() string { return r.wrapped.Usage() }

type wrappedCommandCommandDescriptionCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandUsage) Description() string {
	return r.wrapped.Description()
}
func (r *wrappedCommandCommandDescriptionCommandUsage) Usage() string { return r.wrapped.Usage() }

type wrappedCommandCommandContextCommandDescriptionCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}
func (r *wrappedCommandCommandExamplesCommandUsage) Examples() []string { return r.wrapped.Examples() }
func (r *wrappedCommandCommandExamplesCommandUsage) Usage() string      { return r.wrapped.Usage() }

type wrappedCommandCommandContextCommandExamplesCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}
func (r *wrappedCommandCommandFlagsCommandUsage) Flags() []cli.Flag { return r.wrapped.Flags() }
func (r *wrappedCommandCommandFlagsCommandUsage) Usage() string     { return r.wrapped.Usage() }

type wrappedCommandCommandContextCommandFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}
func (r *wrappedCommandCommandHookCommandUsage) Hook() *cli.Hook { return r.wrapped.Hook() }
func (r *wrappedCommandCommandHookCommandUsage) Usage() string   { return r.wrapped.Usage() }

type wrappedCommandCommandContextCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandFlagsCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandFlagsCommandHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}
func (r *wrappedCommandCommandFlagsCommandHookCommandUsage) Hook() *cli.Hook { return r.wrapped.Hook() }
func (r *wrappedCommandCommandFlagsCommandHookCommandUsage) Usage() string   { return r.wrapped.Usage() }

type wrappedCommandCommandContextCommandFlagsCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandFlagsCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}
func (r *wrappedCommandCommandPersistentFlagsCommandUsage) Usage() string { return r.wrapped.Usage() }

type wrappedCommandCommandContextCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandExamplesCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandFlagsCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandFlagsCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandFlagsCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandFlagsCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}
func (r *wrappedCommandCommandPersistentHookCommandUsage) Usage() string { return r.wrapped.Usage() }

type wrappedCommandCommandContextCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandExamplesCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandFlagsCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}

type wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage struct{ wrapped commandAllInterfaces }

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Execute(a0 context.Context, b0, c0 []string) error {
	return r.wrapped.Execute(a0, b0, c0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Context(a0 context.Context) context.Context {
	return r.wrapped.Context(a0)
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Description() string {
	return r.wrapped.Description()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Examples() []string {
	return r.wrapped.Examples()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Flags() []cli.Flag {
	return r.wrapped.Flags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Hook() *cli.Hook {
	return r.wrapped.Hook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentFlags() []cli.Flag {
	return r.wrapped.PersistentFlags()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) PersistentHook() *cli.PersistentHook {
	return r.wrapped.PersistentHook()
}

func (r *wrappedCommandCommandContextCommandDescriptionCommandExamplesCommandFlagsCommandHookCommandPersistentFlagsCommandPersistentHookCommandUsage) Usage() string {
	return r.wrapped.Usage()
}
